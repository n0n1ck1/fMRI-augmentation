# -*- coding: utf-8 -*-
"""TSCNN_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_apK6xdlz5EUKkVyZADROLmoHG5XVP9b
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

class TimeSeriesCNN(nn.Module):
    def __init__(self, input_channels, hidden_size=128, dropout=0.5, conv_output_size=1120):
        super(TimeSeriesCNN, self).__init__()
        self.conv_layers = nn.ModuleList()
        self.input_channels = input_channels

        for _ in range(input_channels):
            self.conv_layers.append(nn.Sequential(
                nn.Conv1d(1, 128, kernel_size=5),
                nn.BatchNorm1d(128),
                nn.LeakyReLU(0.1),
                nn.Dropout(p=dropout),
                nn.MaxPool1d(kernel_size=2, stride=2, padding=1),

                nn.Conv1d(128, 64, kernel_size=5),
                nn.BatchNorm1d(64),
                nn.LeakyReLU(0.1),
                nn.Dropout(p=dropout),
                nn.MaxPool1d(kernel_size=2, stride=2, padding=1),

                nn.Conv1d(64, 32, kernel_size=5),
                nn.BatchNorm1d(32),
                nn.LeakyReLU(0.1),
                nn.Dropout(p=dropout),
                nn.MaxPool1d(kernel_size=2, stride=2, padding=1),

                nn.Conv1d(32, 16, kernel_size=5),
                nn.BatchNorm1d(16),
                nn.LeakyReLU(0.1),
                nn.Dropout(p=dropout),
                nn.MaxPool1d(kernel_size=2, stride=2, padding=1),
            ))

        self.fc1 = nn.Linear(conv_output_size, hidden_size)
        self.fc2 = nn.Linear(hidden_size, 1)

    def forward(self, x):
        conv_outs = []
        for i in range(self.input_channels):
            conv_out = self.conv_layers[i](x[:, i:i+1, :])
            conv_outs.append(conv_out)
        conv_out = torch.cat(conv_outs, dim=1)
        conv_out = conv_out.view(conv_out.size(0), -1)
        fc_out = F.relu(self.fc1(conv_out))
        output = torch.sigmoid(self.fc2(fc_out))
        return output.squeeze(1)